import json
import csv
import re

from python.helper import name_fixer
from python.helper import write_fasta

def country_fasta(in_file, out_fasta, countries):
    in_f = str(in_file)
    out_fas = out_fasta 
    countries = countries

    #import pdb;pdb.set_trace()
    with open(in_f) as json_f:
        data = json.load(json_f)
        keys = list(data.keys())
        good = ["35 kDa coat protein", "major coat protein", "CP", "coat protein"]
        import pdb;pdb.set_trace()
        for num, country in enumerate(countries):
            with open(out_fas[num]) as out_fasta:
                for p in keys:
                    prods = data[p]["product"]
                    for pos, item in enumerate(prods):
                        equal = name_fixer(data[p]["country"]) == name_fixer(country)
                        if item in good and equal:
                            print(data[p]["country"], country)
                                '''
                                acc_num = name_fixer(p)
                                CDS = data[p]["CDS"][pos]
                                orf1_s, orf1_e = int(re.findall(r'\d+', CDS.split("..")[0])[0]) - 1, int(re.findall(r'\d+', CDS.split("..")[1])[0])
                                if data[p]["collection_date"][0] == "no_value":
                                    date = name_fixer(data[p]["create_date"])
                                else:
                                    date = name_fixer(data[p]["collection_date"][0])
                                country = name_fixer(data[p]["country"][0])
                                host = name_fixer(data[p]["host"][0])
                                strain = name_fixer(data[p]["strain"][0])
                                isolate = name_fixer(data[p]["isolate"][0])
                                
                                nuc_seq = data[p]["nuc_seq"]
                                seq = nuc_seq[orf1_s:orf1_e]

                                header = "%s_%s_%s_%s_%s_%s_%s" % (acc_num, item, data, country, host, strain, isolate)
                                header = header.replace("__","_")
                                #out.write(">{}\n{}\n".format(header,seq))
                            else:
                                continue 
                                '''
